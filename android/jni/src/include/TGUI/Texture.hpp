/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus's Graphical User Interface
// Copyright (C) 2012-2015 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef TGUI_TEXTURE_HPP
#define TGUI_TEXTURE_HPP

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <TGUI/TextureData.hpp>
#include <TGUI/TextureManager.hpp>

#include <SFML/Graphics/Drawable.hpp>
#include <SFML/Graphics/Transformable.hpp>
#include <SFML/Graphics/Vertex.hpp>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    class TGUI_API Texture : public sf::Transformable, public sf::Drawable
    {
    public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief The way the image should be scaled
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class ScalingType
        {
            Normal,           ///< The image is not split and scaled normally
            Horizontal,       ///< Image is split in Left, Middle and Right parts. Left and Right keep ratio, Middle gets stretched
            Vertical,         ///< Image is split in Top, Middle and Bottom parts. Top and Bottom keep ratio, Middle gets stretched
            NineSliceScaling  ///< Image is split in 9 parts. Corners keep size, sides are stretched in one direction, middle is stretched in both directions
        };


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Default constructor
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Texture() {}


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Constructor that created the texture.
        ///
        /// @param filename   Filename of the image to load.
        /// @param partRect   Load only part of the image. Don't pass this parameter if you want to load the full image.
        /// @param middlePart Choose the middle part of the image for 9-slice scaling (relative to the part defined by partRect)
        /// @param repeated   Should the image be repeated or stretched when the size is bigger than the image?
        ///
        /// This constructor just calls the load function.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Texture(const std::string& filename,
                const sf::IntRect& partRect = sf::IntRect(0, 0, 0, 0),
                const sf::IntRect& middlePart = sf::IntRect(0, 0, 0, 0),
                bool repeated = false);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Copy constructor
        ///
        /// @param copy  Instance to copy
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Texture(const Texture& copy);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Virtual destructor
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ~Texture();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Overload of assignment operator
        ///
        /// @param right  Instance to assign
        ///
        /// @return Reference to itself
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Texture& operator=(const Texture& right);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Creates the texture.
        ///
        /// @param filename   Filename of the image to load.
        /// @param partRect   Load only part of the image. Don't pass this parameter if you want to load the full image.
        /// @param middlePart Choose the middle part of the image for 9-slice scaling (relative to the part defined by partRect)
        /// @param repeated   Should the image be repeated or stretched when the size is bigger than the image?
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void load(const std::string& filename,
                  const sf::IntRect& partRect = sf::IntRect(0, 0, 0, 0),
                  const sf::IntRect& middlePart = sf::IntRect(0, 0, 0, 0),
                  bool repeated = false);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the texture data.
        ///
        /// @return Data of the texture
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        TextureData* getData() const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the size that the image will have on the screen
        ///
        /// @param size  Size of the image
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setSize(const sf::Vector2f& size);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the size that the image has on the screen
        ///
        /// @return Size of the image
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        sf::Vector2f getSize() const
        {
            return m_size;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the size that the loaded image
        ///
        /// @return Size of the image like it was when loaded (no scaling applied)
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        sf::Vector2f getImageSize() const
        {
            return (m_data) ? sf::Vector2f{m_data->texture.getSize()} : sf::Vector2f{0,0};
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Set the global color of the sprite
        ///
        /// This color is modulated (multiplied) with the sprite's texture. It can be used to colorize the sprite,
        /// or change its global opacity.
        ///
        /// By default, the sprite's color is opaque white.
        ///
        /// @param color New color of the sprite
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setColor(const sf::Color& color);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the part of the texture that should be drawn
        ///
        /// @param textureRect Visible part of the texture
        ///
        /// Set this to (0, 0, 0, 0) to show the entire texture
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setTextureRect(const sf::FloatRect& textureRect)
        {
            m_textureRect = textureRect;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the part of the texture that is drawn
        ///
        /// @return Visible part of the texture
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        sf::FloatRect getTextureRect() const
        {
            return m_textureRect;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Enable or disable the smooth filter.
        ///
        /// When the filter is activated, the texture appears smoother so that pixels are less noticeable.
        /// However if you want the texture to look exactly the same as its source file, you should leave it disabled.
        /// The smooth filter is disabled by default.
        ///
        /// @param smooth True to enable smoothing, false to disable it
        ///
        /// @see isSmooth
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setSmooth(bool smooth);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Tell whether the smooth filter is enabled or not.
        ///
        /// @return True if smoothing is enabled, false if it is disabled
        ///
        /// @see setSmooth
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        bool isSmooth() const
        {
            return (m_data) ? m_data->texture.isSmooth() : false;
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Check if a certain pixel is transparent.
        ///
        /// @param x  global X coordinate of the pixel
        /// @param y  global Y coordinate of the pixel
        ///
        /// @return True when the pixel is transparent, false when it is not
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        bool isTransparentPixel(float x, float y) const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Returns the way in which the image is being scaled.
        ///
        /// @return Scaling type
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ScalingType getScalingType() const
        {
            return m_scalingType;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    private:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Changes the texture
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setTexture(TextureData& data, const sf::IntRect& middleRect);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Update the vertices of the internal vertex array
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void updateVertices();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Draws the texture
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void draw(sf::RenderTarget& target, sf::RenderStates states) const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private:
        TextureData* m_data = nullptr;
        std::vector<sf::Vertex> m_vertices;

        sf::Vector2f  m_size;
        sf::IntRect   m_middleRect;
        sf::FloatRect m_textureRect;

        ScalingType   m_scalingType = ScalingType::Normal;

        float m_rotation = 0;

        static TextureManager m_textureManager;

        friend class TextureManager;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_TEXTURE_HPP
